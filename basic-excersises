#
# Check a name in a sentance
#

from json.encoder import INFINITY


def check_for_name(sentence, name):
    lower_case_sentence = sentence.lower()
    lower_case_name = name.lower()
    if lower_case_sentence.find(lower_case_name) > -1:
        return True
    return False


'''
answer

def check_for_name(sentence, name):
  return name.lower() in sentence.lower()
'''


#
# Every other letter in word
#

def every_other_letter(word):
    new_word = ''
    for i in range(0, len(word), 2):
        new_word += word[i]
    return new_word


#
# Reverse string
#

def reverse_string(word):
    new_word = ''
    for i in range(len(word) -1, -1, -1):
        new_word += word[i]
    return new_word

#print(reverse_string("Codecademy"))


#
# Make spoonerish error in string
#

def make_spoonerism(str1, str2):
    r_str1 = str2[0] + str1[1:]
    r_str2 = str1[0] + str2[1:]
    return r_str1 + ' ' + r_str2



#
# add exclamnation
#

def add_exclamation(string):
    if len(string) < 20:
        for i in range(len(string), 20):
            string += '!'
        return string
    return string

'''
answer

def add_exclamation(word):
  while(len(word) < 20):
    word += "!"
  return word
'''


#
# The sum of the values of a dictionary
# 

def sum_values(dictionary):
    sum = 0
    for value in dictionary.values():
        sum += value
    return sum

#print(sum_values({"milk":5, "eggs":2, "flour": 3}))


#
# Sum values of even keys
#

def sum_even_keys(dictionary):
    sum = 0
    for key in dictionary.keys():
        if key % 2 == 0:
            sum +=dictionary[key]
    return sum

#print(sum_even_keys({1:5, 2:2, 4:3}))



#
# Add to ten to a value in a dictionary
#

def add_ten(dictionary):
    for key in dictionary.keys():
        dictionary[key] += 10
    return dictionary

#print(add_ten({10:1, 100:2, 1000:3}))



#
# Values That Are Keys
#

def values_that_are_keys(dictionary):
    result = []
    for value in dictionary.values():
        if value in dictionary:
            result.append(value)
    return result

#print(values_that_are_keys({1:100, 2:1, 3:4, 4:10}))




#
# Max key in a dictionary
#

def max_key(dictionary):
    max_value = float("-inf")
    max_key = float("-inf")
    for key in dictionary.keys():
        if dictionary[key] > max_value:
            max_value = dictionary[key]
            max_key = key
    return max_key

#print(max_key({"a":100, "b":10, "c":1000}))



#
# Word Length Dict
#

def word_length_dictionary(words):
    result = {}
    for word in words:
        result[word] = len(word)
    return result



#
# Frequency Count
#

def frequency_dictionary(str_list):
    result = {}
    for str in str_list:
        if str_list.count(str) > 1 and str in result:
            result[str] += 1
        else:
            result[str] = 1
    return result

'''
answer

def frequency_dictionary(words):
  freqs = {}
  for word in words:
    if word not in freqs:
      freqs[word] = 0
    freqs[word] += 1
  return freqs
'''

#print(frequency_dictionary(["apple", "apple", "cat", 1]))


#
# The number of unique values
#

def unique_values(dictionary):
    uniques = []
    for item in dictionary.values():
        if item not in uniques:
            uniques.append(item)
    return len(uniques)

print(unique_values({0:3, 1:1, 4:1, 5:3}))
